"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2442],{9613:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>h});var r=a(9496);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),c=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=c(a),m=n,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return a?r.createElement(h,s(s({ref:t},l),{},{components:a})):r.createElement(h,s({ref:t},l))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:n,s[1]=o;for(var c=2;c<i;c++)s[c]=a[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6308:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=a(2564),n=(a(9496),a(9613));const i={sidebar_position:1},s="HTTP Resources",o={unversionedId:"serve/resources",id:"serve/resources",title:"HTTP Resources",description:"The [WebResource] interface defines how to handle requests to a specific path or path pattern. The resource handlers are",source:"@site/docs/serve/resources.md",sourceDirName:"serve",slug:"/serve/resources",permalink:"/WSF/docs/serve/resources",draft:!1,editUrl:"https://github.com/Divine-Software/WSF/tree/master/website/docs/serve/resources.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Handling HTTP Requests",permalink:"/WSF/docs/serve/"},next:{title:"Filters",permalink:"/WSF/docs/serve/filters"}},p={},c=[{value:"The Resource Lifecycle",id:"the-resource-lifecycle",level:2},{value:"Request Arguments",id:"request-arguments",level:2},{value:"Generating Responses",id:"generating-responses",level:2}],l={toc:c},d="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"http-resources"},"HTTP Resources"),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource"},"WebResource")," interface defines how to handle requests to a specific path or path pattern. The resource handlers are\nusually implemented as classes that implements the ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource"},"WebResource")," interface, with a static ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResourceCtor#path"},"path")," property that defines\nthe locations of the handled resource. The path pattern is specified as a ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"},"regular expression")," and can include ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges#using_named_groups"},"named\ncapture groups")," to make certain parts of the path available as request arguments."),(0,n.kt)("p",null,"The path pattern should neither begin nor end with a slash, so to match the root path, you need to write an empty\nregular expression: ",(0,n.kt)("inlineCode",{parentName:"p"},"RegExp('')"),". A request can only be handled by one single ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource"},"WebResource"),"; if multiple resources' path\npattern matches a request, only the one registered first will be used."),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"When using ",(0,n.kt)("em",{parentName:"p"},"regular expression literals"),", the forward slash \u2014 which is used as a path separator in URLs \u2014 must be\nescaped with a backslash (like ",(0,n.kt)("inlineCode",{parentName:"p"},"/path\\/to\\/resource/"),"), or else the regular expression literal will be terminated\nprematurely. It's also not possible to write an empty expression using literals \u2014 ",(0,n.kt)("inlineCode",{parentName:"p"},"//")," is a comment, not an empty\nregular expression literal. We'll provide helper functions to build these regular expressions in the future, but for\nnow, you'll need to write them by hand.")),(0,n.kt)("h2",{id:"the-resource-lifecycle"},"The Resource Lifecycle"),(0,n.kt)("p",null,"Resource classes are registered once via the ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_web_service.WebService#addresource"},"addResource")," or ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_web_service.WebService#addresources"},"addResources")," methods."),(0,n.kt)("p",null,"When a ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource"},"WebResource")," matches an incoming request, an instance is ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResourceCtor#constructor"},"constructed")," (via ",(0,n.kt)("inlineCode",{parentName:"p"},"new"),"), where it\nreceives a reference to the ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_web_service.WebService#context"},"WebService Context"),", a custom object that you provide when the ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_web_service.WebService"},"WebService")," is created.\nThis is how the resource instances can access various services and configurations in your application."),(0,n.kt)("p",null,"After that, it optional ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#init"},"init")," method is invoked, if present, allowing the resource to perform asynchronous\ninitialization. Candidate operations for this method is to perform authentication",(0,n.kt)("sup",{parentName:"p",id:"fnref-1"},(0,n.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),", look up parent resources or otherwise\nensure that the resource being accessed is valid."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"For security reasons, we always instantiate a fresh ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource"},"WebResource")," for each request. We don't ever want information\n(authentication, sessions etc) to leak between requests; by always creating new objects, this entire class of\nvulnerabilities is effectively eliminated.")),(0,n.kt)("p",null,"Then, one of the ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#head"},"HEAD"),", ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#get"},"GET"),", ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#put"},"PUT"),", ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#post"},"POST"),", ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#patch"},"PATCH"),", ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#delete"},"DELETE")," or ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#options"},"OPTIONS"),"\u200b",(0,n.kt)("sup",{parentName:"p",id:"fnref-2"},(0,n.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))," methods is invoked. If\nno such method is defined, ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#default"},"default")," is called (",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#head"},"HEAD")," falls back to ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#get"},"GET")," first, then ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#default"},"default"),")."),(0,n.kt)("p",null,"Should any method throw an exception, ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#catch"},"catch")," is given a chance to handle the exception, before the error is propagated\nto the handler registered via ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_web_service.WebService#seterrorhandler"},"setErrorHandler"),", or sent back to the client. The ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_web_service.WebError"},"WebError")," exception (or a subclass\nthereof) is the preferred exception to throw, since it can hold all information required in order to construct a valid\nHTTP response. Any other exception will result in a ",(0,n.kt)("em",{parentName:"p"},"500 \u2013 Internal Server Error")," response."),(0,n.kt)("p",null,"Finally, ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#close"},"close")," is invoked and the object is disposed of. If the resource needs to perform any cleanup tasks, this is\nthe place to do that."),(0,n.kt)("p",null,"All methods in the ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource"},"WebResource")," interface are optional. If no matching method handler is found, ",(0,n.kt)("em",{parentName:"p"},"405 \u2013 Method Not\nAllowed")," is returned; if no resource matched at all, ",(0,n.kt)("em",{parentName:"p"},"404 \u2013 Not Found")," is instead returned."),(0,n.kt)("h2",{id:"request-arguments"},"Request Arguments"),(0,n.kt)("p",null,"The method handlers in ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource"},"WebResource")," receives a single argument, a ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_web_service.WebArguments"},"WebArguments")," instance, that provides access the\nincoming request and parameters derived from it. This object contains utility methods to access and convert various\nrequest parameters. To determine from where a parameter should be fetched, a single-character ",(0,n.kt)("em",{parentName:"p"},"type prefix")," is used:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type prefix"),(0,n.kt)("th",{parentName:"tr",align:null},"Parameter source"),(0,n.kt)("th",{parentName:"tr",align:null},"Example Input"),(0,n.kt)("th",{parentName:"tr",align:null},"Example Usage"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"?")),(0,n.kt)("td",{parentName:"tr",align:null},"URL query parameter"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"http://example.com?search=that&sort=name")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"?sort"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"$")),(0,n.kt)("td",{parentName:"tr",align:null},"Capture groups from ",(0,n.kt)("a",{parentName:"td",href:"/WSF/docs/api/interfaces/divine_web_service.WebResourceCtor#path"},"path")," pattern"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},'RegExp("products/(?<product_id>[0-9]+)")')),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"$product_id"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"@")),(0,n.kt)("td",{parentName:"tr",align:null},"Request header"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Content-Type: application/json")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"@content-type"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},".")),(0,n.kt)("td",{parentName:"tr",align:null},"Request body"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},'{ "userName": "joe" }')),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},".userName"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"~")),(0,n.kt)("td",{parentName:"tr",align:null},"Custom parameter"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_web_service.WebRequest#setparam"},"WebRequest.setParam"),(0,n.kt)("inlineCode",{parentName:"td"},'("user", { ... })')),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"~user"))))),(0,n.kt)("h2",{id:"generating-responses"},"Generating Responses"),(0,n.kt)("p",null,"To return a response with a ",(0,n.kt)("em",{parentName:"p"},"200 \u2013 OK")," status code, well, just return it. This works for values of type ",(0,n.kt)("inlineCode",{parentName:"p"},"Buffer"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"URI"),"\nand Node.js ",(0,n.kt)("inlineCode",{parentName:"p"},"ReadableStream")," instances (",(0,n.kt)("em",{parentName:"p"},"application/octet-stream"),"), plain old objects and arrays (",(0,n.kt)("em",{parentName:"p"},"application/json"),"),\n",(0,n.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"bigint"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"boolean")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"Date")," (",(0,n.kt)("em",{parentName:"p"},"text/plain"),"), and ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/modules/divine_x4e#xml"},"XML")," objects, including those constructed via\nthe ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/modules/divine_x4e#html"},"html")," tagged template literal or via TSX (",(0,n.kt)("em",{parentName:"p"},"application/xml")," or ",(0,n.kt)("em",{parentName:"p"},"text/html"),", based on the XML namespace)."),(0,n.kt)("p",null,"Anything that is ",(0,n.kt)("inlineCode",{parentName:"p"},"AsyncIterable")," (but not ",(0,n.kt)("inlineCode",{parentName:"p"},"ReadableStream"),") will be sent as ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/"},"SSE/server-sent\nevents")," (",(0,n.kt)("em",{parentName:"p"},"text/event-stream"),")."),(0,n.kt)("p",null,"If you need to specify the status code or add response headers (including the ",(0,n.kt)("inlineCode",{parentName:"p"},"content-type"),"), wrap the response in a\n",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_web_service.WebResponse"},"WebResponse")," or ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_web_service.EventStreamResponse"},"EventStreamResponse")," object yourself."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"In the future, the WSF will automatically negotiate the media type based on the return value and the ",(0,n.kt)("inlineCode",{parentName:"p"},"accept")," and\n",(0,n.kt)("inlineCode",{parentName:"p"},"accept-charset")," request parameters and serialize the response accordingly.")),(0,n.kt)("div",{className:"footnotes"},(0,n.kt)("hr",{parentName:"div"}),(0,n.kt)("ol",{parentName:"div"},(0,n.kt)("li",{parentName:"ol",id:"fn-1"},"Another common pattern is to use a ",(0,n.kt)("a",{parentName:"li",href:"/WSF/docs/api/interfaces/divine_web_service.WebFilter"},"WebFilter")," to perform authentication for a wide range of resources, and simply\nprovide the resources with some kind of ",(0,n.kt)("em",{parentName:"li"},"User")," object via ",(0,n.kt)("a",{parentName:"li",href:"/WSF/docs/api/classes/divine_web_service.WebRequest#setparam"},"WebRequest.setParam")," if authentication (and\nauthorization) succeeded.",(0,n.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-2"},"By default, ",(0,n.kt)("inlineCode",{parentName:"li"},"OPTIONS")," is handled automatically by inspecting what methods the resource implements. However, if you\nuse ",(0,n.kt)("a",{parentName:"li",href:"/WSF/docs/api/interfaces/divine_web_service.WebResource#default"},"default"),", you need to process ",(0,n.kt)("inlineCode",{parentName:"li"},"OPTIONS")," manually since there is no way for the WSF to know what methods you\nhandle.",(0,n.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")))))}u.isMDXComponent=!0}}]);