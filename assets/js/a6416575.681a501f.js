"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5923],{9613:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),f=a,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||i;return t?r.createElement(m,o(o({ref:n},l),{},{components:t})):r.createElement(m,o({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3895:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return p}});var r=t(9624),a=t(42),i=(t(9496),t(9613)),o=["components"],s={sidebar_position:2},c="Transactions",u={unversionedId:"query/transactions",id:"query/transactions",title:"Transactions",description:"Executing transactions is just as simple as executing queries. If you need to protect a block of code in a transaction,",source:"@site/docs/query/transactions.md",sourceDirName:"query",slug:"/query/transactions",permalink:"/WSF/docs/query/transactions",editUrl:"https://github.com/Divine-Software/WSF/tree/master/website/docs/query/transactions.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"SQL Queries",permalink:"/WSF/docs/query/sql-queries"},next:{title:"Handling HTTP Requests",permalink:"/WSF/docs/serve/"}},l=[{value:"Automatic Deadlock Handling",id:"automatic-deadlock-handling",children:[],level:2}],d={toc:l};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"transactions"},"Transactions"),(0,i.kt)("p",null,"Executing transactions is just as simple as executing queries. If you need to protect a block of code in a transaction,\njust wrap the code inside an async function and pass that function to ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DatabaseURI#query"},"query"),". When the function returns, the\ntransaction will commit; if it throws, it will be rolled back."),(0,i.kt)("p",null,"It's allowed to nest transactions, in which case ",(0,i.kt)("em",{parentName:"p"},"savepoints")," will be automatically used instead."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { FIELDS, URI } from '@divine/uri'\nimport '@divine/uri-postgres-protocol'; // Activate optional PostgreSQL driver\n...\n\nconst db = new URI('pg://localhost/my-db');\n\nexport async function storeUser(user: User) {\n    return await db.query(() => {\n        const [ current ] = await db.query`select * from users where id = ${user.id} for update`;\n\n        if (current) {\n            ...\n        } else {\n            ...\n        }\n    });\n}\n\nexport async function insertOrder(incomingOrder: IncomingOrder) {\n    const { user, lines, ...order } = incomingOrder;\n\n    return await db.query(() => {\n        await storeUser(user);\n\n        const orderID = (await db.query`insert into orders ${q.values(order)}`)[FIELDS][0].rowKey;\n        await db.$`#order_lines`.append(lines.map((line) => ({ ...line, order: orderID })));\n\n        return orderID;\n    });\n}\n")),(0,i.kt)("p",null,"Notice how you don't have to pass connections around inside the transaction. Also notice the fact that ",(0,i.kt)("inlineCode",{parentName:"p"},"storeUser")," will\nbegin a transaction if called by its own, but will in this case instead start a savepoint, since it's being called when\na transaction is already in progress."),(0,i.kt)("h2",{id:"automatic-deadlock-handling"},"Automatic Deadlock Handling"),(0,i.kt)("p",null,"If the database driver detects that a transaction has been aborted because of a deadlock, it will automatically sleep\nfor a while and then invoke the passed function again. See ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DatabaseURI#deadlock-handling"},"Deadlock handling")," in the API documentation for more\ninformation."),(0,i.kt)("p",null,"This, and other transaction parameters, may be configured on a per-transaction basis by providing ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DatabaseURI#query"},"query")," with a\n",(0,i.kt)("a",{parentName:"p",href:"../api/interfaces/divine_uri.DBTransactionParams"},"DBTransactionParams")," object before the callback function."))}p.isMDXComponent=!0}}]);