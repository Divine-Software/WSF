"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6104],{9613:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>f});var r=a(9496);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(a),c=n,f=d["".concat(l,".").concat(c)]||d[c]||u[c]||s;return a?r.createElement(f,i(i({ref:t},m),{},{components:a})):r.createElement(f,i({ref:t},m))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<s;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3498:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=a(2564),n=(a(9496),a(9613));const s={sidebar_label:"Web Forms, MIME Messages",sidebar_position:3},i="Web Forms and MIME Messages",o={unversionedId:"parse/forms-messages",id:"parse/forms-messages",title:"Web Forms and MIME Messages",description:"Parsing (and submitting) browser forms is an important part of the web. The WSF has built-in parsers for all standard",source:"@site/docs/parse/forms-messages.md",sourceDirName:"parse",slug:"/parse/forms-messages",permalink:"/WSF/docs/parse/forms-messages",draft:!1,editUrl:"https://github.com/Divine-Software/WSF/tree/master/website/docs/parse/forms-messages.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Web Forms, MIME Messages",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"JSON, TOML and YAML",permalink:"/WSF/docs/parse/json-toml-yaml"},next:{title:"HTML and XML",permalink:"/WSF/docs/parse/html-xml"}},l={},p=[],m={toc:p},d="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"web-forms-and-mime-messages"},"Web Forms and MIME Messages"),(0,n.kt)("p",null,"Parsing (and submitting) browser forms is an important part of the web. The WSF has built-in parsers for all standard\n",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype"},"enctype")," values (",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.FormParser"},(0,n.kt)("inlineCode",{parentName:"a"},"application/x-www-form-urlencoded")),", ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.MultiPartParser"},(0,n.kt)("inlineCode",{parentName:"a"},"multipart/form-data"))," and\n",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.StringParser"},(0,n.kt)("inlineCode",{parentName:"a"},"text/plain")),")."),(0,n.kt)("p",null,"Additionally, there is a built-in parser for (MIME) messages, which is primarily used for e-mails, but is also sometimes\nused by web services if they need to return multiple responses for a single request, for example."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Format"),(0,n.kt)("th",{parentName:"tr",align:null},"Main Media Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Parser"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"HTML forms"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"application/x-www-form-urlencoded")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_uri.FormParser"},"FormParser"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"MIME messages"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"message/*"),(0,n.kt)("sup",{parentName:"td",id:"fnref-1"},(0,n.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_uri.MessageParser"},"MessageParser"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Multi-part"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"multipart/*"),(0,n.kt)("sup",{parentName:"td",id:"fnref-2"},(0,n.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_uri.MultiPartParser"},"MultiPartParser"))))),(0,n.kt)("p",null,'HTML forms are parsed to a string key/value record, and so are multi-part documents; however, the values of the latter\ntype may also be URIs and nested multi-part or message documents, in addition to strings. The "raw" fields are also\nalways available via the ',(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/modules/divine_uri#fields"},"FIELDS")," array, as specified by the ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.WithFields"},"WithFields")," interface. This array may contain additional\ninformation not available directly in the object returned when parsing. When serializing, the ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/modules/divine_uri#fields"},"FIELDS")," array \u2014 if\npresent \u2014 always takes precedence over the direct object properties."),(0,n.kt)("p",null,"When parsing ",(0,n.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),", files will not be included in-line in the message, but rather stored locally in a\ndisk cache. The value of such fields will be an URI that you can ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.URI#load"},"load")," to read the file's content. Cached files will be\nautomatically purged after an hour (or when the current request finishes, when using ",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_web_service.WebArguments#body"},"WebArguments.body"),"), but you may\n",(0,n.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.URI#remove"},"remove")," them manually if you wish."),(0,n.kt)("p",null,"The following example just loads an email and dumps it to the console:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { MimeMessage, URI } from '@divine/uri';\n\nconst email = await new URI('./message.eml').load<MimeMessage>();\nconsole.log(`Message from ${email.headers.from}`, email.value);\n")),(0,n.kt)("p",null,"Forms are mostly used in web services. Here's a trivial service that displays information about uploaded files:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { ContentDisposition } from '@divine/headers';\nimport { FIELDS, MultiPartData, URI } from '@divine/uri';\nimport { WebArguments, WebResource, WebServer, WebService } from '@divine/web-service';\nimport { html } from '@divine/x4e';\nimport '@divine/uri-x4e-parser'; // Activate optional XML & HTML parsers\n\nnew WebServer('localhost', 3333, new WebService(null).addResource(class implements WebResource {\n    static path = RegExp('');\n\n    async GET() {\n        return html`<form method=post enctype=multipart/form-data>\n            <input type=file name=doc>\n            <input type=submit value=Upload>\n        </form>`;\n    }\n\n    async POST(args: WebArguments) {\n        const docField = (await args.body<MultiPartData>())[FIELDS][0];\n        const fileName = new ContentDisposition(docField.headers['content-disposition']).filename;\n        const fileInfo = docField.value instanceof URI ? await docField.value.info() : String(docField.value);\n\n        return `The uploaded file ${fileName} is ${fileInfo.length} bytes long!`;\n    }\n})).start();\n")),(0,n.kt)("div",{className:"footnotes"},(0,n.kt)("hr",{parentName:"div"}),(0,n.kt)("ol",{parentName:"div"},(0,n.kt)("li",{parentName:"ol",id:"fn-1"},"This parser is primarily for ",(0,n.kt)("inlineCode",{parentName:"li"},"message/rfc822")," (E-mail) messages, but can actually handle most other ",(0,n.kt)("inlineCode",{parentName:"li"},"message"),"\nsubtypes too (not ",(0,n.kt)("inlineCode",{parentName:"li"},"message/http"),", though).",(0,n.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-2"},"This parser handles MIME multi-part messages as well as ",(0,n.kt)("inlineCode",{parentName:"li"},"multipart/form-data"),", used by web forms.",(0,n.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")))))}u.isMDXComponent=!0}}]);