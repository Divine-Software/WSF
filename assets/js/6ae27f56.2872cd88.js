"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9604],{9613:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var i=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,m=u["".concat(l,".").concat(d)]||u[d]||f[d]||r;return n?i.createElement(m,o(o({ref:t},p),{},{components:n})):i.createElement(m,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6425:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return f}});var i=n(7813),a=n(7044),r=(n(9496),n(9613)),o=["components"],s={sidebar_position:1},l="Local Files",c={unversionedId:"connect/files",id:"connect/files",title:"Local Files",description:"When accessing local files, the file name extension is used to determine what kind of file it is and what",source:"@site/docs/connect/files.md",sourceDirName:"connect",slug:"/connect/files",permalink:"/WSF/docs/connect/files",editUrl:"https://github.com/Divine-Software/WSF/tree/master/website/docs/connect/files.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Accessing Resources",permalink:"/WSF/docs/connect/"},next:{title:"Web Resources",permalink:"/WSF/docs/connect/http"}},p={},f=[{value:"Reading Files and Directories",id:"reading-files-and-directories",level:2},{value:"Writing Files",id:"writing-files",level:2},{value:"Watching Files",id:"watching-files",level:2}],u={toc:f};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"local-files"},"Local Files"),(0,r.kt)("p",null,"When accessing local files, the file name extension is used to determine what kind of file it is and what\nparser/serializer to use when reading and writing. If the name of the file to access varies, it's probably better to\nspecify the media type manually in order to avoid surprises. By the way, the function used to determine the media type\nof local files is also directly available as ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/modules/divine_uri#guesscontenttype"},"guessContentType"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"file:")," protocol is default when creating an URI, since all relative URLs will be resolved against the ",(0,r.kt)("em",{parentName:"p"},"current\nworking directory")," by default, so to access a local file, you can just pass in a relative or absolute path that conforms\nto the URL/URI specifications. However, Windows-style paths are not URL paths; to create an URI from a native path name,\nuse ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.FileURI#create"},"FileURI.create"),". If you really need to create URIs for non-native paths, the ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/modules/divine_uri#encodefilepath"},"encodeFilePath")," function accepts both\n",(0,r.kt)("inlineCode",{parentName:"p"},"posix"),"- and ",(0,r.kt)("inlineCode",{parentName:"p"},"windows"),"-style paths."),(0,r.kt)("h2",{id:"reading-files-and-directories"},"Reading Files and Directories"),(0,r.kt)("p",null,"To read and parse a file, just ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.FileURI#load"},"load")," it, optionally overriding the media type to invoke a non-default parser; to list\nobjects in a directory, ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.FileURI#list"},"list")," it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { FileURI, URI } from '@divine/uri';\n\nconst json = await new URI('package.json').load();\nconst users = await FileURI.create('/etc/passwd').load<string[][]>('text/csv; x-separator=:');\nconst files = await new URI('.').list();\n")),(0,r.kt)("h2",{id:"writing-files"},"Writing Files"),(0,r.kt)("p",null,"Use ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.FileURI#save"},"save")," to write files. The default file format is inferred from the file name or data, but you can also specify a formay manually:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { URI } from '@divine/uri';\n\nconst config = {\n    mode: 'dev',\n    db: {\n        uri: 'pg://localhost/default',\n        username: 'sa',\n    }\n};\n\nawait new URI('file.log').save('A text file! \ud83d\ude00\\n');\nawait new URI('file.json').save(config);\nawait new URI('file.toml').save(config);\nawait new URI('file.conf').save(config, 'application/yaml');\n")),(0,r.kt)("h2",{id:"watching-files"},"Watching Files"),(0,r.kt)("p",null,"Open and iterate a filesystem event stream using ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.FileURI#watch"},"watch"),", like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { URI } from '@divine/uri';\n\nfor await (const event of new URI('.').watch()) {\n    console.log(event);\n}\n")),(0,r.kt)("p",null,"Note that in order to watch files, the optional peer dependency ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chokidar"},"chokidar")," must be available."))}d.isMDXComponent=!0}}]);