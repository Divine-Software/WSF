"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3722],{9613:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return a?n.createElement(k,l(l({ref:t},d),{},{components:a})):n.createElement(k,l({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},4502:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(2564),r=(a(9496),a(9613));const i={id:"divine_uri.DBResult",title:"Class: DBResult",sidebar_label:"@divine/uri.DBResult",custom_edit_url:null},l=void 0,o={unversionedId:"api/classes/divine_uri.DBResult",id:"api/classes/divine_uri.DBResult",title:"Class: DBResult",description:"@divine/uri.DBResult",source:"@site/docs/api/classes/divine_uri.DBResult.md",sourceDirName:"api/classes",slug:"/api/classes/divine_uri.DBResult",permalink:"/WSF/docs/api/classes/divine_uri.DBResult",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"divine_uri.DBResult",title:"Class: DBResult",sidebar_label:"@divine/uri.DBResult",custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"@divine/uri.DBQuery",permalink:"/WSF/docs/api/classes/divine_uri.DBQuery"},next:{title:"@divine/uri.DatabaseURI",permalink:"/WSF/docs/api/classes/divine_uri.DatabaseURI"}},s={},p=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"_db",id:"_db",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"columns",id:"columns",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"rowCount",id:"rowcount",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"rowKey",id:"rowkey",level:3},{value:"Defined in",id:"defined-in-4",level:4},{value:"Accessors",id:"accessors",level:2},{value:"species",id:"species",level:3},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"Methods",id:"methods",level:2},{value:"_fixColumnInfo",id:"_fixcolumninfo",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"toObject",id:"toobject",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"toObjects",id:"toobjects",level:3},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"updateColumnInfo",id:"updatecolumninfo",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-9",level:4}],d={toc:p},u="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/modules/divine_uri"},"@divine/uri"),".DBResult"),(0,r.kt)("p",null,"A raw database result set."),(0,r.kt)("p",null,"This Array subclass hold rows of cells in a tabular format and metadata about the columns (name, type etc) in the\n",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBResult#columns"},"columns")," property. Additional metadata such as ",(0,r.kt)("em",{parentName:"p"},"row count")," and ",(0,r.kt)("em",{parentName:"p"},"row key")," is also available."),(0,r.kt)("p",null,"This is an abstract class. Each database driver is expected to provide a full implementation and a concrete subclass."),(0,r.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Array"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"unknown"),"[]",">"),(0,r.kt)("p",{parentName:"li"},"\u21b3 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"DBResult"))))),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("h3",{id:"constructor"},"constructor"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"new DBResult"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"_db"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"columns"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"records"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rowCount?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rowKey?"),")"),(0,r.kt)("p",null,"Constructs a new DBResult."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"_db")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_uri.DatabaseURI"},(0,r.kt)("inlineCode",{parentName:"a"},"DatabaseURI"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The DatabaseURI this result set belongs to.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"columns")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/WSF/docs/api/interfaces/divine_uri.DBColumnInfo"},(0,r.kt)("inlineCode",{parentName:"a"},"DBColumnInfo")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Metadata abount the columns in this result set.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"records")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"unknown"),"[][]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The records to adopt. May be an empty array if no actual result was produced by the query.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"rowCount?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The number of rows the query producing the result set affected.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"rowKey?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The primary key/unique row key the the query producing the result set generated.")))),(0,r.kt)("h4",{id:"overrides"},"Overrides"),(0,r.kt)("p",null,"Array","<","unknown[]\\",">",".constructor"),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/c3447be/uri/src/protocols/database.ts#L555"},"uri/src/protocols/database.ts:555")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"_db"},"_","db"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("strong",{parentName:"p"},"_","db"),": ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DatabaseURI"},(0,r.kt)("inlineCode",{parentName:"a"},"DatabaseURI"))),(0,r.kt)("p",null,"The DatabaseURI this result set belongs to."),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/c3447be/uri/src/protocols/database.ts#L555"},"uri/src/protocols/database.ts:555")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"columns"},"columns"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"columns"),": ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBColumnInfo"},(0,r.kt)("inlineCode",{parentName:"a"},"DBColumnInfo")),"[]"),(0,r.kt)("p",null,"Metadata abount the columns in this result set."),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/c3447be/uri/src/protocols/database.ts#L555"},"uri/src/protocols/database.ts:555")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"rowcount"},"rowCount"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,r.kt)("strong",{parentName:"p"},"rowCount"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"The number of rows the query producing the result set affected."),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/c3447be/uri/src/protocols/database.ts#L555"},"uri/src/protocols/database.ts:555")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"rowkey"},"rowKey"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,r.kt)("strong",{parentName:"p"},"rowKey"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("p",null,"The primary key/unique row key the the query producing the result set generated."),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/c3447be/uri/src/protocols/database.ts#L555"},"uri/src/protocols/database.ts:555")),(0,r.kt)("h2",{id:"accessors"},"Accessors"),(0,r.kt)("h3",{id:"species"},"[species]"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," ",(0,r.kt)("strong",{parentName:"p"},"[species]"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"ArrayConstructor")),(0,r.kt)("p",null,"Array functions return a new Array, not a DBResult."),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ArrayConstructor")),(0,r.kt)("h4",{id:"overrides-1"},"Overrides"),(0,r.kt)("p",null,"Array.","[species]"),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/c3447be/uri/src/protocols/database.ts#L542"},"uri/src/protocols/database.ts:542")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"_fixcolumninfo"},"_","fixColumnInfo"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("strong",{parentName:"p"},"_fixColumnInfo"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"columnRow"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Partial"),"<",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBColumnInfo"},(0,r.kt)("inlineCode",{parentName:"a"},"DBColumnInfo")),">"),(0,r.kt)("p",null,"A helper method for database driver implementations that converts a DBColumnInfo-like object into an actual\nDBColumnInfo entry."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"columnRow")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A DBColumnInfo-like object. Keys may be non-lowercase and values may be all strings, for instance.")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Partial"),"<",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBColumnInfo"},(0,r.kt)("inlineCode",{parentName:"a"},"DBColumnInfo")),">"),(0,r.kt)("p",null,"A DBColumnInfo."),(0,r.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/c3447be/uri/src/protocols/database.ts#L622"},"uri/src/protocols/database.ts:622")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"toobject"},"toObject"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"toObject"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"fields?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," & ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBMetadata"},(0,r.kt)("inlineCode",{parentName:"a"},"DBMetadata"))),(0,r.kt)("p",null,"Converts this result set into a single object/record."),(0,r.kt)("p",null,"The result is an object where keys are the column labels holding the values (unlike the rows in this class, where\neach row is just an array of values)."),(0,r.kt)("p",null,"This method is used by ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DatabaseURI#watch"},"watch")," if the event contains only a single row, which is usually the\ncase."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.kt)("p",null,"TypeError  If the length of this result set is not exactly 1."),(0,r.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The actual record type.")))),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"fields?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_uri.DBResult"},(0,r.kt)("inlineCode",{parentName:"a"},"DBResult")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"What to set ",(0,r.kt)("inlineCode",{parentName:"td"},"[FIELDS]")," to. Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"[ this ]"),".")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"T")," & ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBMetadata"},(0,r.kt)("inlineCode",{parentName:"a"},"DBMetadata"))),(0,r.kt)("p",null,"A single record (where keys are the column labels) of the first (and only) row in the result\nset."),(0,r.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/c3447be/uri/src/protocols/database.ts#L669"},"uri/src/protocols/database.ts:669")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"toobjects"},"toObjects"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"toObjects"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"fields?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[] & ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBMetadata"},(0,r.kt)("inlineCode",{parentName:"a"},"DBMetadata"))),(0,r.kt)("p",null,"Converts this result set into an array of object/records."),(0,r.kt)("p",null,"The result is an array of object where keys are the column labels holding the values (unlike the rows in this\nclass, where each row is just an array of values)."),(0,r.kt)("p",null,"This method is used by ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DatabaseURI"},"DatabaseURI")," to convert all result sets created by the database drivers before\nreturning them to the caller."),(0,r.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The actual record type.")))),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"fields?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_uri.DBResult"},(0,r.kt)("inlineCode",{parentName:"a"},"DBResult")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"What to set ",(0,r.kt)("inlineCode",{parentName:"td"},"[FIELDS]")," to. Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"[ this ]"),".")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[] & ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBMetadata"},(0,r.kt)("inlineCode",{parentName:"a"},"DBMetadata"))),(0,r.kt)("p",null,"An array of records (where keys are the column labels) of all the row in the result set."),(0,r.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/c3447be/uri/src/protocols/database.ts#L697"},"uri/src/protocols/database.ts:697")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"updatecolumninfo"},"updateColumnInfo"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"updateColumnInfo"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBColumnInfo"},(0,r.kt)("inlineCode",{parentName:"a"},"DBColumnInfo")),"[]",">"),(0,r.kt)("p",null,"Initially, the column metatdata will include just the bare minumum, like the label, possibly data type and the\norigins of the value. By calling this method, the metadata will be expanded to everything that is known about the\ncolumn by querying the database for more information."),(0,r.kt)("p",null,"The base class implementation of this method queries the ",(0,r.kt)("inlineCode",{parentName:"p"},"INFORMATION_SCHEMA.COLUMNS")," view based on\n",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBColumnInfo#table_catalog"},"table_catalog"),", ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBColumnInfo#table_schema"},"table_schema"),", ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBColumnInfo#table_name"},"table_name")," and\n",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBColumnInfo#column_name"},"column_name"),". Subclasses may override or extend this method, based on how the actual database\nprovides column metadata."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.kt)("p",null,"DBError  On database/query errors."),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBColumnInfo"},(0,r.kt)("inlineCode",{parentName:"a"},"DBColumnInfo")),"[]",">"),(0,r.kt)("p",null,"The updated/expanded column metadata (also available in ",(0,r.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBResult#columns"},"columns")," after this call has\ncompleted)."),(0,r.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/c3447be/uri/src/protocols/database.ts#L586"},"uri/src/protocols/database.ts:586")))}m.isMDXComponent=!0}}]);