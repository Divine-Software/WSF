"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5923],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=a,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},417:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(2564),a=(n(9496),n(9613));const i={sidebar_position:2},o="Transactions",s={unversionedId:"query/transactions",id:"query/transactions",title:"Transactions",description:"Executing transactions is just as simple as executing queries. If you need to protect a block of code in a transaction,",source:"@site/docs/query/transactions.md",sourceDirName:"query",slug:"/query/transactions",permalink:"/WSF/docs/query/transactions",draft:!1,editUrl:"https://github.com/Divine-Software/WSF/tree/master/website/docs/query/transactions.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"SQL Queries",permalink:"/WSF/docs/query/sql-queries"},next:{title:"Handling HTTP Requests",permalink:"/WSF/docs/serve/"}},c={},l=[{value:"Automatic Deadlock Handling",id:"automatic-deadlock-handling",level:2}],u={toc:l},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"transactions"},"Transactions"),(0,a.kt)("p",null,"Executing transactions is just as simple as executing queries. If you need to protect a block of code in a transaction,\njust wrap the code inside an async function and pass that function to ",(0,a.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DatabaseURI#query"},"query"),". When the function returns, the\ntransaction will commit; if it throws, it will be rolled back."),(0,a.kt)("p",null,"It's allowed to nest transactions, in which case ",(0,a.kt)("em",{parentName:"p"},"savepoints")," will be automatically used instead."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { FIELDS, URI } from '@divine/uri'\nimport '@divine/uri-postgres-protocol'; // Activate optional PostgreSQL driver\n...\n\nconst db = new URI('pg://localhost/my-db');\n\nexport async function storeUser(user: User) {\n    return await db.query(() => {\n        const [ current ] = await db.query`select * from users where id = ${user.id} for update`;\n\n        if (current) {\n            ...\n        } else {\n            ...\n        }\n    });\n}\n\nexport async function insertOrder(incomingOrder: IncomingOrder) {\n    const { user, lines, ...order } = incomingOrder;\n\n    return await db.query(() => {\n        await storeUser(user);\n\n        const orderID = (await db.query`insert into orders ${q.values(order)}`)[FIELDS][0].rowKey;\n        await db.$`#order_lines`.append(lines.map((line) => ({ ...line, order: orderID })));\n\n        return orderID;\n    });\n}\n")),(0,a.kt)("p",null,"Notice how you don't have to pass connections around inside the transaction. Also notice the fact that ",(0,a.kt)("inlineCode",{parentName:"p"},"storeUser")," will\nbegin a transaction if called by its own, but will in this case instead start a savepoint, since it's being called when\na transaction is already in progress."),(0,a.kt)("h2",{id:"automatic-deadlock-handling"},"Automatic Deadlock Handling"),(0,a.kt)("p",null,"If the database driver detects that a transaction has been aborted because of a deadlock, it will automatically sleep\nfor a while and then invoke the passed function again. See ",(0,a.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DatabaseURI#deadlock-handling"},"Deadlock handling")," in the API documentation for more\ninformation."),(0,a.kt)("p",null,"This, and other transaction parameters, may be configured on a per-transaction basis by providing ",(0,a.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DatabaseURI#query"},"query")," with a\n",(0,a.kt)("a",{parentName:"p",href:"/WSF/docs/api/interfaces/divine_uri.DBTransactionParams"},"DBTransactionParams")," object before the callback function."))}p.isMDXComponent=!0}}]);