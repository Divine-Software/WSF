"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3425],{9613:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var a=r(9496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),f=p(r),m=n,u=f["".concat(l,".").concat(m)]||f[m]||d[m]||s;return r?a.createElement(u,o(o({ref:t},c),{},{components:r})):a.createElement(u,o({ref:t},c))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[f]="string"==typeof e?e:n,o[1]=i;for(var p=2;p<s;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7690:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=r(2564),n=(r(9496),r(9613));const s={sidebar_position:1},o="Bytes and Text",i={unversionedId:"parse/sequences",id:"parse/sequences",title:"Bytes and Text",description:"The most basic type of parsers are the byte and text parsers. There are two kind of byte parsers, one that collects all",source:"@site/docs/parse/sequences.md",sourceDirName:"parse",slug:"/parse/sequences",permalink:"/WSF/docs/parse/sequences",draft:!1,editUrl:"https://github.com/Divine-Software/WSF/tree/master/website/docs/parse/sequences.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Data Formats",permalink:"/WSF/docs/parse/"},next:{title:"JSON, TOML and YAML",permalink:"/WSF/docs/parse/json-toml-yaml"}},l={},p=[],c={toc:p},f="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(f,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"bytes-and-text"},"Bytes and Text"),(0,n.kt)("p",null,"The most basic type of parsers are the byte and text parsers. There are two kind of byte parsers, one that collects all\nbytes in a byte stream into a ",(0,n.kt)("a",{parentName:"p",href:"https://nodejs.org/api/buffer.html"},"Buffer"),", and one that just passes each chunk through as they arrive",(0,n.kt)("sup",{parentName:"p",id:"fnref-1"},(0,n.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),". The text parser\ninterprets the byte stream according to some character encoding and converts to JavaScript strings."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Format"),(0,n.kt)("th",{parentName:"tr",align:null},"Main Media Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Parser"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://nodejs.org/api/buffer.html"},"Buffer")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"application/octet-stream")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_uri.BufferParser"},"BufferParser"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Byte stream"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"application/vnd.esxx.octet-stream"),(0,n.kt)("sup",{parentName:"td",id:"fnref-2"},(0,n.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_uri.PassThroughParser"},"PassThroughParser"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Text"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"text/plain")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_uri.StringParser"},"StringParser"))))),(0,n.kt)("p",null,"The Buffer parser is useful when you need to load some resource of unknown type, and the pass-through parser can be used\nfor large objects that wont fit in memory. The text parser understands the most common character encodings, specified by\nthe ",(0,n.kt)("inlineCode",{parentName:"p"},"charset")," media type parameter."),(0,n.kt)("p",null,"The following examples shows how an ISO-8859-1-encoded text file might be read into memory in a couple of different\nways",(0,n.kt)("sup",{parentName:"p",id:"fnref-3"},(0,n.kt)("a",{parentName:"sup",href:"#fn-3",className:"footnote-ref"},"3")),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { ContentType } from '@divine/headers';\nimport { URI } from '@divine/uri';\n\nconst latin1 = new URI('latin1-file.txt');\nconst buffer = await latin1.load<Buffer>(ContentType.bytes);\nconst string = (await latin1.load('text/plain; charset=iso-8859-1')).valueOf();\nconst stream: Buffer[] = [];\n\nfor await (const chunk of latin1 /* or latin1.load<AsyncIterator<Buffer>>(ContentType.stream) */ ) {\n    stream.push(chunk);\n}\n")),(0,n.kt)("div",{className:"footnotes"},(0,n.kt)("hr",{parentName:"div"}),(0,n.kt)("ol",{parentName:"div"},(0,n.kt)("li",{parentName:"ol",id:"fn-1"},"In the WSF, byte streams are represented as ",(0,n.kt)("inlineCode",{parentName:"li"},"AsyncIterable<Buffer>"),".",(0,n.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-2"},"This custom media type is only used to identify the pass-through parser and should not be used otherwise.",(0,n.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-3"},"Notice how the ",(0,n.kt)("a",{parentName:"li",href:"/WSF/docs/api/classes/divine_uri.URI"},"URI")," class is also an ",(0,n.kt)("inlineCode",{parentName:"li"},"AsyncIterable<Buffer>"),", which can be iterated directly.",(0,n.kt)("a",{parentName:"li",href:"#fnref-3",className:"footnote-backref"},"\u21a9")))))}d.isMDXComponent=!0}}]);