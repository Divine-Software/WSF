"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3467],{9613:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return c}});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=o(a),c=r,k=m["".concat(p,".").concat(c)]||m[c]||u[c]||i;return a?n.createElement(k,l(l({ref:t},d),{},{components:a})):n.createElement(k,l({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1549:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return u}});var n=a(2182),r=a(9028),i=(a(9496),a(9613)),l=["components"],s={id:"divine_uri.q",title:"Namespace: q",sidebar_label:"q",custom_edit_url:null},p=void 0,o={unversionedId:"api/namespaces/divine_uri.q",id:"api/namespaces/divine_uri.q",title:"Namespace: q",description:"@divine/uri.q",source:"@site/docs/api/namespaces/divine_uri.q.md",sourceDirName:"api/namespaces",slug:"/api/namespaces/divine_uri.q",permalink:"/WSF/docs/api/namespaces/divine_uri.q",editUrl:null,tags:[],version:"current",frontMatter:{id:"divine_uri.q",title:"Namespace: q",sidebar_label:"q",custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"DBDriver",permalink:"/WSF/docs/api/namespaces/divine_uri.DBDriver"},next:{title:"JSX",permalink:"/WSF/docs/api/namespaces/divine_x4e.jsx4HTML.JSX"}},d={},u=[{value:"Functions",id:"functions",level:2},{value:"assign",id:"assign",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"join",id:"join",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"list",id:"list",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"quote",id:"quote",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"raw",id:"raw",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"values",id:"values",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-5",level:4}],m={toc:u};function c(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/modules/divine_uri"},"@divine/uri"),".q"),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"assign"},"assign"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"assign"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"columns?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"quote?"),"): ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("p",null,"Constructs a ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},"DBQuery")," to be used as part of SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATE")," statements."),(0,i.kt)("p",null,"Given an object containing the column/value pairs, constructs an assignment expression that can be used as part of an\nSQL ",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATE")," statement. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const userID = 1337;\nconst entry = { name: 'Martin', language: 'sv', country: 'se' };\nconst query = q`update locale set ${q.assign(entry)} where id = ${userID}`;\n\nassert(query.toString() === 'update locale set \"name\" = \xabMartin\xbb,\"language\" = \xabsv\xbb,\"country\" = \xabse\xbb where id = \xab1337\xbb');\n")),(0,i.kt)("p",null,"If any of the object's values are ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", the SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"DEFAULT")," keyword will be used in its place."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"data")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Params")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The object to assign. The key represents the column name and the value is the column value.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"columns?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Specifies what keys (columns) to fetch from the data object. Defaults to all keys from the object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"quote")),(0,i.kt)("td",{parentName:"tr",align:"left"},"(",(0,i.kt)("inlineCode",{parentName:"td"},"ident"),": ",(0,i.kt)("inlineCode",{parentName:"td"},"string"),") => ",(0,i.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"q.quote")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The quote function to use when escaping the column names. Defaults to ",(0,i.kt)("a",{parentName:"td",href:"/WSF/docs/api/namespaces/divine_uri.q#quote"},"q.quote"),".")))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("p",null,"A DBQuery suitable to be used in an SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATE")," statement."),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/bdc9277/uri/src/protocols/database.ts#L221"},"uri/src/protocols/database.ts:221")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"join"},"join"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"join"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"delimiter"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"queries"),"): ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("p",null,"Constructs a ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},"DBQuery")," by concatenating a list of subqueries and separating then with the provided delimiter."),(0,i.kt)("p",null,"If the list of subqueries contains ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", those elements will be filtered out. Example usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const users = [ 1, 3, 7 ];\nconst query = q`select * from users where ${q.join(' or ', users.map((u) => q`id = ${u}`))}`;\n\nassert(query.toString() === 'select * from users where id = \xab1\xbb or id = \xab3\xbb or id = \xab7\xbb');\n")),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"delimiter")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The raw sequence to separate the queries with. Must be trused and not be user-provided, or (very)                   bad things will happen eventually.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"queries")),(0,i.kt)("td",{parentName:"tr",align:"left"},"(",(0,i.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery")),")[]"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The subqueries to concatenate. May contain ",(0,i.kt)("inlineCode",{parentName:"td"},"undefined")," elements, which will simply be skipped.")))),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("p",null,"A new DBQuery with all subqueries concatenated."),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/bdc9277/uri/src/protocols/database.ts#L123"},"uri/src/protocols/database.ts:123")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"list"},"list"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"list"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"list"),"): ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("p",null,"Constructs a ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},"DBQuery")," by creating a list of the provided parameters: ",(0,i.kt)("inlineCode",{parentName:"p"},"(elem1, elem2, ...)"),"."),(0,i.kt)("p",null,"This utility function is suitable for SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"IN")," clauses. If the parameter list contains ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", those elements\nwill be filtered out. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const users = [ 1, 3, undefined, 7 ];\nconst query = q`select * from users where id in ${q.list(users)}`;\n\nassert(query.toString() === 'select * from users where id in (\xab1\xbb,\xab3\xbb,\xab7\xbb)');\n")),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"list")),(0,i.kt)("td",{parentName:"tr",align:"left"},"(",(0,i.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"BasicTypes"),")[]"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The parameters to include in the list. May contain ",(0,i.kt)("inlineCode",{parentName:"td"},"undefined")," elements, which will simply be skipped.")))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("p",null,"A DBQuery suitable to be used in an SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"IN")," clause."),(0,i.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/bdc9277/uri/src/protocols/database.ts#L145"},"uri/src/protocols/database.ts:145")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"quote"},"quote"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"quote"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"ident"),"): ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("p",null,"Constructs a ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},"DBQuery")," by enclosing the provied string in quotes."),(0,i.kt)("p",null,"This function is used to escape SQL identifiers, like table or column names. Quotes inside the string will be encoded\nas ",(0,i.kt)("inlineCode",{parentName:"p"},'""'),". Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const table = q.quote(debit ? 'debit-table' : 'credit-table');\nconst query = q`select * from ${table} where amount > 10`;\n")),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ident")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The name of a table to column to escape.")))),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("p",null,"A (partial) DBQuery with the identified escaped."),(0,i.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/bdc9277/uri/src/protocols/database.ts#L83"},"uri/src/protocols/database.ts:83")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"raw"},"raw"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"raw"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"raw"),"): ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("p",null,"Constructs a ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},"DBQuery")," by taking the provided raw string as-is."),(0,i.kt)("p",null,"This is useful if the database does not accept a parameter at this place in the query. However, you ",(0,i.kt)("em",{parentName:"p"},"must be very\ncareful")," not to introduce query injection vulnerabilities when using this function! Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const offset = q.raw(Number(100 * page));\nconst query  = q`select * from posts limit 100 offset ${offset}`;\n")),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"raw")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The raw query to create. Must be trused and not be user-provided, or (very) bad things will happen             eventually.")))),(0,i.kt)("h4",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("p",null,"A (partial) DBQuery with the unparsed query."),(0,i.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/bdc9277/uri/src/protocols/database.ts#L102"},"uri/src/protocols/database.ts:102")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"values"},"values"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"values"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"columns?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"parts?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"quote?"),"): ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("p",null,"Constructs a ",(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},"DBQuery")," to be used as part of SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERT")," statements."),(0,i.kt)("p",null,"Given an object (or list of objects) containing the column/value pairs, constructs either the ",(0,i.kt)("em",{parentName:"p"},"columns")," list or the\n",(0,i.kt)("em",{parentName:"p"},"values")," list (or lists), or both, depending on the ",(0,i.kt)("inlineCode",{parentName:"p"},"parts")," argument. Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Insert columns name, language, country\nconst entry = { name: 'Martin', language: 'sv', country: 'se' };\nconst query = q`insert into locale ${q.values(entry)}`;\n\nassert(query.toString() === 'insert into locale (\"name\",\"language\",\"country\") values (\xabMartin\xbb,\xabsv\xbb,\xabse\xbb)');\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Insert multiple rows, but only columns name and country\nconst multi = [ { name: 'Martin', language: 'sv', country: 'se' }, { name: 'John', language: 'en', country: 'us' } ];\nconst query = q`insert into users ${q.values(multi, ['name', 'country'])}`;\n\nassert(query.toString() === 'insert into users (\"name\",\"country\") values (\xabMartin\xbb,\xabse\xbb),(\xabJohn\xbb,\xabus\xbb)');\n")),(0,i.kt)("p",null,"If any of the object's values are ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", the SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"DEFAULT")," keyword will be used in its place."),(0,i.kt)("h4",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"data")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Params")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"Params"),"[]"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The object or objects to insert. The key represents the column name and the value is the column value.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"columns?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Specifies what keys (columns) to fetch from the data objects. Defaults to all keys from all objects.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"parts")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},'"columns"')," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},'"values"')," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},'"expr"')),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"'expr'")),(0,i.kt)("td",{parentName:"tr",align:"left"},"What part of the statement to generate. Use ",(0,i.kt)("inlineCode",{parentName:"td"},"columns")," to only generate a list of column names,                ",(0,i.kt)("inlineCode",{parentName:"td"},"values")," for a list of value tuples or ",(0,i.kt)("inlineCode",{parentName:"td"},"expr"),", the default, for the complete subexpression.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"quote")),(0,i.kt)("td",{parentName:"tr",align:"left"},"(",(0,i.kt)("inlineCode",{parentName:"td"},"ident"),": ",(0,i.kt)("inlineCode",{parentName:"td"},"string"),") => ",(0,i.kt)("a",{parentName:"td",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"q.quote")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The quote function to use when escaping the column names. Defaults to ",(0,i.kt)("a",{parentName:"td",href:"/WSF/docs/api/namespaces/divine_uri.q#quote"},"q.quote"),".")))),(0,i.kt)("h4",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/WSF/docs/api/classes/divine_uri.DBQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"DBQuery"))),(0,i.kt)("p",null,"A DBQuery suitable to be used in an SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERT")," statement."),(0,i.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Divine-Software/WSF/blob/bdc9277/uri/src/protocols/database.ts#L187"},"uri/src/protocols/database.ts:187")))}c.isMDXComponent=!0}}]);